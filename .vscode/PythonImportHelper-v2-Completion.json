[
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "RedirectResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "UnidentifiedImageError",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "UnidentifiedImageError",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "redis",
        "description": "redis",
        "isExtraImport": true,
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "redis",
        "description": "redis",
        "isExtraImport": true,
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "rq",
        "description": "rq",
        "isExtraImport": true,
        "detail": "rq",
        "documentation": {}
    },
    {
        "label": "Worker",
        "importPath": "rq",
        "description": "rq",
        "isExtraImport": true,
        "detail": "rq",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "rq",
        "description": "rq",
        "isExtraImport": true,
        "detail": "rq",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "rq.job",
        "description": "rq.job",
        "isExtraImport": true,
        "detail": "rq.job",
        "documentation": {}
    },
    {
        "label": "generate_image_task",
        "importPath": "app.scripts.flux_tx2im",
        "description": "app.scripts.flux_tx2im",
        "isExtraImport": true,
        "detail": "app.scripts.flux_tx2im",
        "documentation": {}
    },
    {
        "label": "generate_image_task",
        "importPath": "app.scripts.flux_tx2im",
        "description": "app.scripts.flux_tx2im",
        "isExtraImport": true,
        "detail": "app.scripts.flux_tx2im",
        "documentation": {}
    },
    {
        "label": "generate_im2im_task",
        "importPath": "app.scripts.flux_im2im",
        "description": "app.scripts.flux_im2im",
        "isExtraImport": true,
        "detail": "app.scripts.flux_im2im",
        "documentation": {}
    },
    {
        "label": "generate_im2im_task",
        "importPath": "app.scripts.flux_im2im",
        "description": "app.scripts.flux_im2im",
        "isExtraImport": true,
        "detail": "app.scripts.flux_im2im",
        "documentation": {}
    },
    {
        "label": "cairosvg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cairosvg",
        "description": "cairosvg",
        "detail": "cairosvg",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "torch,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch.",
        "description": "torch.",
        "detail": "torch.",
        "documentation": {}
    },
    {
        "label": "FluxKontextPipeline",
        "importPath": "diffusers",
        "description": "diffusers",
        "isExtraImport": true,
        "detail": "diffusers",
        "documentation": {}
    },
    {
        "label": "FluxPipeline",
        "importPath": "diffusers",
        "description": "diffusers",
        "isExtraImport": true,
        "detail": "diffusers",
        "documentation": {}
    },
    {
        "label": "load_image",
        "importPath": "diffusers.utils",
        "description": "diffusers.utils",
        "isExtraImport": true,
        "detail": "diffusers.utils",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "create_client",
        "importPath": "supabase",
        "description": "supabase",
        "isExtraImport": true,
        "detail": "supabase",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "supabase",
        "description": "supabase",
        "isExtraImport": true,
        "detail": "supabase",
        "documentation": {}
    },
    {
        "label": "create_client",
        "importPath": "supabase",
        "description": "supabase",
        "isExtraImport": true,
        "detail": "supabase",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "supabase",
        "description": "supabase",
        "isExtraImport": true,
        "detail": "supabase",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "mimetypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mimetypes",
        "description": "mimetypes",
        "detail": "mimetypes",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "StaticFiles",
        "importPath": "fastapi.staticfiles",
        "description": "fastapi.staticfiles",
        "isExtraImport": true,
        "detail": "fastapi.staticfiles",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "huggingface_hub",
        "description": "huggingface_hub",
        "isExtraImport": true,
        "detail": "huggingface_hub",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.routes.endpoints",
        "description": "app.routes.endpoints",
        "isExtraImport": true,
        "detail": "app.routes.endpoints",
        "documentation": {}
    },
    {
        "label": "asyncio,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio.",
        "description": "asyncio.",
        "detail": "asyncio.",
        "documentation": {}
    },
    {
        "label": "FluxRequest",
        "kind": 6,
        "importPath": "app.routes.endpoints",
        "description": "app.routes.endpoints",
        "peekOfCode": "class FluxRequest(BaseModel):\n    prompt: str\n    task_id: str\n    user_uuid: str\n    return_base64: Optional[bool] = True\n    seed: Optional[int] = None\n@router.post(\"/generate-flux\")\nasync def enqueue_flux_task(req: FluxRequest):\n    # Step 1: Generate a unique task ID\n    # task_id = str(uuid.uuid4())",
        "detail": "app.routes.endpoints",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routes.endpoints",
        "description": "app.routes.endpoints",
        "peekOfCode": "router = APIRouter()\n# Redis setup\nredis_conn = Redis(host=\"redis\", port=6379)\nqueue = Queue(\"flux_image_gen\", connection=redis_conn, default_timeout=3600)\n@router.get(\"/health\")\nasync def health():\n    return {\"status\": \"ok\"}\nclass FluxRequest(BaseModel):\n    prompt: str\n    task_id: str",
        "detail": "app.routes.endpoints",
        "documentation": {}
    },
    {
        "label": "redis_conn",
        "kind": 5,
        "importPath": "app.routes.endpoints",
        "description": "app.routes.endpoints",
        "peekOfCode": "redis_conn = Redis(host=\"redis\", port=6379)\nqueue = Queue(\"flux_image_gen\", connection=redis_conn, default_timeout=3600)\n@router.get(\"/health\")\nasync def health():\n    return {\"status\": \"ok\"}\nclass FluxRequest(BaseModel):\n    prompt: str\n    task_id: str\n    user_uuid: str\n    return_base64: Optional[bool] = True",
        "detail": "app.routes.endpoints",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 5,
        "importPath": "app.routes.endpoints",
        "description": "app.routes.endpoints",
        "peekOfCode": "queue = Queue(\"flux_image_gen\", connection=redis_conn, default_timeout=3600)\n@router.get(\"/health\")\nasync def health():\n    return {\"status\": \"ok\"}\nclass FluxRequest(BaseModel):\n    prompt: str\n    task_id: str\n    user_uuid: str\n    return_base64: Optional[bool] = True\n    seed: Optional[int] = None",
        "detail": "app.routes.endpoints",
        "documentation": {}
    },
    {
        "label": "generate_im2im_task",
        "kind": 2,
        "importPath": "app.scripts.flux_im2im",
        "description": "app.scripts.flux_im2im",
        "peekOfCode": "def generate_im2im_task(prompt: str,\n                        user_uuid: str,\n                        task_id: str,\n                        image_path: str, \n                        seed: int = None\n                        ) -> dict:\n    from huggingface_hub import login\n    login(token=os.environ[\"HUGGINGFACE_TOKEN\"])\n    print(\"Start loading pipeline!\")\n    pipe = FluxKontextPipeline.from_pretrained(",
        "detail": "app.scripts.flux_im2im",
        "documentation": {}
    },
    {
        "label": "SUPABASE_URL",
        "kind": 5,
        "importPath": "app.scripts.flux_im2im",
        "description": "app.scripts.flux_im2im",
        "peekOfCode": "SUPABASE_URL = os.getenv(\"SUPABASE_URL\")\nSUPABASE_SERVICE_KEY = os.getenv(\"SUPABASE_SERVICE_KEY\")\nsupabase: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)\ndef generate_im2im_task(prompt: str,\n                        user_uuid: str,\n                        task_id: str,\n                        image_path: str, \n                        seed: int = None\n                        ) -> dict:\n    from huggingface_hub import login",
        "detail": "app.scripts.flux_im2im",
        "documentation": {}
    },
    {
        "label": "SUPABASE_SERVICE_KEY",
        "kind": 5,
        "importPath": "app.scripts.flux_im2im",
        "description": "app.scripts.flux_im2im",
        "peekOfCode": "SUPABASE_SERVICE_KEY = os.getenv(\"SUPABASE_SERVICE_KEY\")\nsupabase: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)\ndef generate_im2im_task(prompt: str,\n                        user_uuid: str,\n                        task_id: str,\n                        image_path: str, \n                        seed: int = None\n                        ) -> dict:\n    from huggingface_hub import login\n    login(token=os.environ[\"HUGGINGFACE_TOKEN\"])",
        "detail": "app.scripts.flux_im2im",
        "documentation": {}
    },
    {
        "label": "generate_image_task",
        "kind": 2,
        "importPath": "app.scripts.flux_tx2im",
        "description": "app.scripts.flux_tx2im",
        "peekOfCode": "def generate_image_task(prompt: str,\n                        user_uuid: str,\n                        task_id: str,\n                        seed: int = None) -> dict:\n    from huggingface_hub import login\n    login(token=os.environ[\"HUGGINGFACE_TOKEN\"])\n    print(f\"task_id: {task_id}, user_uuid: {user_uuid}\")\n    pipe = FluxPipeline.from_pretrained(\n        \"black-forest-labs/FLUX.1-dev\",\n        torch_dtype=torch.float16,",
        "detail": "app.scripts.flux_tx2im",
        "documentation": {}
    },
    {
        "label": "SUPABASE_URL",
        "kind": 5,
        "importPath": "app.scripts.flux_tx2im",
        "description": "app.scripts.flux_tx2im",
        "peekOfCode": "SUPABASE_URL = os.getenv(\"SUPABASE_URL\")\nSUPABASE_SERVICE_KEY = os.getenv(\"SUPABASE_SERVICE_KEY\")\nsupabase: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)\ndef generate_image_task(prompt: str,\n                        user_uuid: str,\n                        task_id: str,\n                        seed: int = None) -> dict:\n    from huggingface_hub import login\n    login(token=os.environ[\"HUGGINGFACE_TOKEN\"])\n    print(f\"task_id: {task_id}, user_uuid: {user_uuid}\")",
        "detail": "app.scripts.flux_tx2im",
        "documentation": {}
    },
    {
        "label": "SUPABASE_SERVICE_KEY",
        "kind": 5,
        "importPath": "app.scripts.flux_tx2im",
        "description": "app.scripts.flux_tx2im",
        "peekOfCode": "SUPABASE_SERVICE_KEY = os.getenv(\"SUPABASE_SERVICE_KEY\")\nsupabase: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)\ndef generate_image_task(prompt: str,\n                        user_uuid: str,\n                        task_id: str,\n                        seed: int = None) -> dict:\n    from huggingface_hub import login\n    login(token=os.environ[\"HUGGINGFACE_TOKEN\"])\n    print(f\"task_id: {task_id}, user_uuid: {user_uuid}\")\n    pipe = FluxPipeline.from_pretrained(",
        "detail": "app.scripts.flux_tx2im",
        "documentation": {}
    },
    {
        "label": "run_flux",
        "kind": 2,
        "importPath": "app.services.flux_service",
        "description": "app.services.flux_service",
        "peekOfCode": "def run_flux(prompt: str):\n    python_exec = \"/app/flux_venv/bin/python\"\n    script_path = \"/app/app/scripts/flux_run.py\"\n    try:\n        result = subprocess.run(\n            [python_exec, script_path, \"--prompt\", prompt],\n            cwd=\"/app/app/scripts\",\n            check=True,\n            capture_output=True,\n            text=True",
        "detail": "app.services.flux_service",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\napp.mount(\"/generated/images\", StaticFiles(directory=\"/app/output\"), name=\"images\")\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\napp.include_router(endpoints_router, prefix=\"/api/v1\", tags=[\"Backend Endpoints\"])",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "listen",
        "kind": 5,
        "importPath": "app.worker",
        "description": "app.worker",
        "peekOfCode": "listen = ['flux_image_gen']\nredis_conn = Redis(host='redis', port=6379)\nif __name__ == '__main__':\n    queues = [Queue(name, connection=redis_conn) for name in listen]\n    worker = Worker(queues, connection=redis_conn)\n    worker.work()",
        "detail": "app.worker",
        "documentation": {}
    },
    {
        "label": "redis_conn",
        "kind": 5,
        "importPath": "app.worker",
        "description": "app.worker",
        "peekOfCode": "redis_conn = Redis(host='redis', port=6379)\nif __name__ == '__main__':\n    queues = [Queue(name, connection=redis_conn) for name in listen]\n    worker = Worker(queues, connection=redis_conn)\n    worker.work()",
        "detail": "app.worker",
        "documentation": {}
    },
    {
        "label": "FluxRequest",
        "kind": 6,
        "importPath": "pe",
        "description": "pe",
        "peekOfCode": "class FluxRequest(BaseModel):\n    prompt: str\n    return_base64: Optional[bool] = True\n    seed: Optional[int] = None\n@router.post(\"/generate-flux\")\nasync def generate_flux(req: FluxRequest):\n    loop = asyncio.get_event_loop()\n    result = await loop.run_in_executor(None, generate_image_task, req.prompt, req.seed)\n    if result[\"status\"] != \"success\":\n        raise HTTPException(status_code=500, detail=result.get(\"error\", \"Unknown error\"))",
        "detail": "pe",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "pe",
        "description": "pe",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/health\")\nasync def health():\n    return {\"status\": \"ok\"}\n# Request body model\nclass FluxRequest(BaseModel):\n    prompt: str\n    return_base64: Optional[bool] = True\n    seed: Optional[int] = None\n@router.post(\"/generate-flux\")",
        "detail": "pe",
        "documentation": {}
    }
]